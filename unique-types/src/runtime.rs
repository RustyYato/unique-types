//! Represents a [`UniqueType`] which tries to aquire a unique value at runtime

use core::hash::Hash;

use crate::{
    unique_indices::{Counter, CounterRef, GlobalCounter},
    UniqueToken, UniqueType,
};

/// A [`UniqueType`] which checks at runtime if it is unique
pub struct RuntimeUt<C: CounterRef = GlobalCounter> {
    value: C::Value,
}

/// The token for [`RuntimeUt`]
pub struct RuntimeUtToken<C: CounterRef>(C::Value);

impl<C: CounterRef> Copy for RuntimeUtToken<C> {}
impl<C: CounterRef> Clone for RuntimeUtToken<C> {
    fn clone(&self) -> Self {
        *self
    }
}

impl<C: CounterRef> Eq for RuntimeUtToken<C> {}
impl<C: CounterRef> PartialEq for RuntimeUtToken<C> {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}

impl<C: CounterRef> PartialOrd for RuntimeUtToken<C> {
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        Some(self.cmp(other))
    }
}

impl<C: CounterRef> Ord for RuntimeUtToken<C> {
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
        self.0.cmp(&other.0)
    }
}

impl<C: CounterRef> Hash for RuntimeUtToken<C> {
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        self.0.hash(state);
    }
}

impl RuntimeUt {
    /// Create a new [`RuntimeUt`] based on the [`GlobalCounter`]
    #[allow(clippy::new_without_default)]
    pub fn new() -> Self {
        Self::with_counter()
    }
}

impl<C: CounterRef> RuntimeUt<C> {
    /// Create a new [`RuntimeUt`] based on the given counter
    pub fn with_counter() -> Self {
        Self {
            value: C::with(Counter::next_value)
                .expect("Tried to create a new RuntimeUt from an exhausted counter"),
        }
    }
}

// SAFETY: CounterRef guarantees that only one value
unsafe impl<C: CounterRef> UniqueType for RuntimeUt<C> {
    type Token = RuntimeUtToken<C>;

    fn token(&self) -> Self::Token {
        RuntimeUtToken(self.value)
    }

    fn owns(&self, token: &Self::Token) -> bool {
        self.value == token.0
    }
}

// SAFETY: It's not possible to reclaim the value generated by the Counter in with_counter
// since RuntimeUt doesn't expose it outside this module
// So no other RuntimeUt can ever have the same value
unsafe impl<C: CounterRef> UniqueToken for RuntimeUt<C> {}
